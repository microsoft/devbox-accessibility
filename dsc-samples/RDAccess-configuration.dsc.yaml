# yaml-language-server: $schema=https://aka.ms/configuration-dsc-schema/0.2
properties:
  ########################################
  ### ASSERTIONS: System Requirements
  ########################################
  assertions:
    ### Assertion: OS Version
    ### -------------------------------------
    - resource: Microsoft.Windows.Developer/OsVersion
      id: OsVersion
      directives:
        description: Minimum OS version requirement
        allowPrerelease: true
      settings:
        MinVersion: "10.0.22000"

  ########################################
  ### RESOURCES: System Configuration
  ########################################
  resources:
    ### Enable: Developer Mode
    ### -------------------------------------
    - resource: Microsoft.Windows.Developer/DeveloperMode
      id: DeveloperMode
      directives:
        description: Enable Developer Mode
        allowPrerelease: true
      settings:
        Ensure: Present

    ### Install: NVAccess.NVDA
    ### -------------------------------------
    ### Working
    - resource: Microsoft.WinGet.DSC/WinGetPackage
      id: InstallNVDA
      directives:
        description: Install NVAccess.NVDA
        allowPrerelease: true
      settings:
        id: NVAccess.NVDA
        source: winget
        ensure: Present

    ### Install: Freedom Scientific JAWS 2023
    ### -------------------------------------
    ### Working
    # - resource: Microsoft.WinGet.DSC/WinGetPackage
    #   id: JAWS
    #   directives:
    #     description: Freedom Scientific JAWS 2023
    #     allowPrerelease: true
    #   settings:
    #     id: FreedomScientific.JAWS.2023
    #     source: winget
    #     ensure: Present

    # ### Download: RDAccess Add-On File from GitHub
    # # ### -------------------------------------
    - resource: PSDscResources/Script
      id: DownloadRDAccessAddOn
      # dependsOn:
      #   - InstallNVDA
      directives:
        description: Download RDAccess Add-On File from GitHub
        allowPrerelease: true
      settings:
        GetScript: |
          @{ Result = Test-Path -Path "$env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon" }
        TestScript: |
          Test-Path -Path "$env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon"
        SetScript: |
          $url = "https://github.com/LeonarddeR/rdAccess/releases/download/1.3.0/rdAccess-1.3.0.nvda-addon"
          $filename = Split-Path -Path $url -Leaf
          $dest = Join-Path -Path $env:APPDATA -ChildPath ('nvda\addons\' + $filename)

          if (-not (Test-Path -Path $dest)) {
              $directory = Split-Path -Path $dest -Parent
              New-Item -Path $directory -ItemType "directory" -ErrorAction SilentlyContinue
          }
          Invoke-WebRequest -Uri $url -OutFile $dest
          Start-Sleep -Seconds 20

    ### Start NVDA Process
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: StartNVDA
      # dependsOn:
      #   - DownloadRDAccessAddOn
      settings:
        GetScript: |
          @{
            Result = (Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null
          }
        TestScript: |
          ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null)
        SetScript: |
          if((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null){
              Stop-Process -Name 'NVDA' -Force
          }
          Start-Process 'C:\Program Files (x86)\NVDA\nvda.exe'
          ###Start-Sleep -Seconds 20

    ## Check if NVDA Process is Running
    ## -------------------------------------
    ### Working
    - resource: PSDscResources/Script
      id: CheckNVDAProcess
      # dependsOn:
      #   - DownloadRDAccessAddOn
      settings:
        GetScript: |
          @{
            Result = Get-Process -Name NVDA -ErrorAction SilentlyContinue | Select-Object -Property Responding
          }
        TestScript: |
          try{
              $process = Get-Process -Name NVDA -ErrorAction SilentlyContinue
              if ($process -eq $null) {
                  $false
              } else {
                  $process.Responding -eq $true
              }
            } catch {
              $false
            }
        SetScript: |
          $counter = 1
          do {
            # Pause for a moment to prevent high CPU usage
            Start-Sleep -Seconds 5
            try {
              # Try to get the NVDA process
              $NVDAProcess = Get-Process -Name NVDA -ErrorAction SilentlyContinue |
              Where-Object { $_.Responding -eq $true }
              $counter++
            }
            catch {
              # If an error occurs, set $NVDAProcess to $null
              $NVDAProcess = $null
            }
          } until (($null -ne $NVDAProcess) -or ($counter -eq 5))

    ### Install RDAccess Add-On using Start-Process
    ### -------------------------------------
    ### Working
    - resource: PSDscResources/Script
      id: InstallNVDAAddOnPackage
      dependsOn:
        - CheckNVDAProcess
      settings:
        GetScript: |
          @{
            Result = $((Test-Path -Path "$env:APPDATA\nvda\addons\rdAccess") -eq $true)
          }
        TestScript: |
          Test-Path -Path "$env:APPDATA\nvda\addons\rdAccess"

        SetScript: |
          if ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) {
            Start-Process 'C:\Program Files (x86)\NVDA\nvda.exe'
          }
          ###Start-Sleep -Seconds 10
          #Start-Process -FilePath "$env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon" -Verbose ### NOT Working Method
          Invoke-Expression "& $env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon" -Verbose ### Alternate Working Method
          # & cmd.exe /c $env:APPDATA\nvda\addons\rdAccess-1.3.0.nvda-addon  ### Alternate Working Method
          ###Start-Sleep -Seconds 20

    ### Restart NVDA Process
    ### -------------------------------------
    - resource: PSDscResources/Script
      id: ReStartNVDA
      dependsOn:
        - InstallNVDAAddOnPackage
      settings:
        GetScript: |
          @{
            Result = ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) -eq $true
          }
        TestScript: |
          #((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) -eq $true
          $false
        SetScript: |
          Start-Sleep -Seconds 10
          if ((Get-Process -Name 'NVDA' -ErrorAction SilentlyContinue) -ne $null) {
            Write-Host "NVDA is running, Stopping NVDA"
            Stop-Process -Name 'NVDA' -Force
          }
          Write-Host "NVDA is not running, Starting NVDA"
          Start-Process 'C:\Program Files (x86)\NVDA\nvda.exe'
          Start-Sleep -Seconds 10

    ### Update NVDA.ini File: operatingMode = 1
    ## -------------------------------------
    - resource: PSDscResources/Script
      id: SetNVDAPreferences
      # dependsOn:
      #   - RestartNVDA
      settings:
        GetScript: |
          @{
            Result = ((Test-Path -Path "$env:APPDATA\nvda\nvda.ini" -ErrorAction SilentlyContinue) -ne "True")
          }
        TestScript: |
          ((Test-Path -Path "$env:APPDATA\nvda\nvda.ini" -ErrorAction SilentlyContinue) -ne "True")

        SetScript: |
          $file = "$env:APPDATA\nvda\nvda.ini"
          $lines = Get-Content -Path $file
          $newLines = @()
          $rdAccessFound = $false

          for ($i = 0; $i -lt $lines.Length; $i++) {
              if ($lines[$i] -match "operatingMode") {
                  $newLines += $lines[$i] -replace "operatingMode.*", "        operatingMode = 1"
              } elseif ($lines[$i] -match "\[rdAccess\]") {
                  $rdAccessFound = $true
                  $newLines += $lines[$i]
                  if ($i + 1 -lt $lines.Count -and $lines[$i + 1] -notmatch "operatingMode") {
                      $newLines += "        operatingMode = 1"
                  } elseif ($i + 1 -eq $lines.Count) {
                      $newLines += "        operatingMode = 1"
                  }
              } else {
                  $newLines += $lines[$i]
              }
          }

          if (-not $rdAccessFound) {
              $newLines += "[rdAccess]"
              $newLines += "        operatingMode = 1"
          }

          $newLines | Set-Content -Path $file

  configurationVersion: 0.2.0
### Run the following command to invoke this configuration:
# Get-WinGetConfiguration -File "C:\Repo\azure-devcenter-customizations-tests\Microsoft.WinGet.Configuration\configuration.dsc.yaml\RDAccess-configuration.dsc.yaml" | Invoke-WinGetConfiguration -Verbose
